log_format time_combined '$remote_addr $remote_user [$time_local] '
  '"$request" $status $body_bytes_sent '
  '"$http_referer" "$http_user_agent" '
  '$request_time $upstream_response_time $pipe';

upstream django {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response

  server unix:/var/run/theaterwecker/web.sock fail_timeout=0;
}

server {
  listen       80;
  server_name  theaterwecker.de;

  access_log /var/log/nginx/access.log time_combined;
  set_real_ip_from   192.168.122.1;
  real_ip_header     X-Forwarded-For;
  server_tokens off;

  charset     utf-8;

  # goaccess analytics
  location /analytics {
    access_log off;
    index index.html;
    alias /var/www/report;

    auth_basic           "login";
    auth_basic_user_file /etc/nginx/htpasswd;
  }

  # Django static
  location /static {
    alias /var/theaterwecker/django/static;
  }

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_app;
  }

  location @proxy_to_app {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if and only if you use HTTPS
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://django;
  }

  location /nginx_status {
    # Turn on nginx stats
    stub_status on;

    # I do not need logs for stats
    access_log   off;

    # Security: Only allow access from 192.168.1.100 IP #
    allow 127.0.0.1;

    # Send rest of the world to /dev/null #
    deny all;
   }
}
